// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    /*
    * Primero se seleccion que memoria se quiere guardar a trav√©s de  un DMux y se les pasa las primeras 8 combinaciones

    */
    DMux4Way(in=load, sel=address[0..1], a=adA, b=adB, c=adC, d=adD);
    //**Despues de identificar en las 16K direcciones se graba en su correspondiente espacio en memoria de la RAM de las 4K combinaciones
    RAM4K(in=in, load=adA, address=address[2..13], out=memA);
    RAM4K(in=in, load=adB, address=address[2..13], out=memB);
    RAM4K(in=in, load=adC, address=address[2..13], out=memC);
    RAM4K(in=in, load=adD, address=address[2..13], out=memD);

    //**Se retorna el debido espacio en memoria que exista en ese espacio
    Mux4Way16(a=memA, b=memB, c=memC, d=memD, sel=address[0..1], out=out);
}