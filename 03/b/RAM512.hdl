// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    * Primero se seleccion que memoria se quiere guardar a trav√©s de  un DMux y se les pasa las primeras 8 combinaciones

    */
    DMux8Way(in=load, sel=address[0..2], a=adA, b=adB, c=adC, d=adD, e=adE, f=adF, g=adG, h=adH);
    //**Despues de identificar en las 64 direcciones se graba en su correspondiente espacio en memoria de la RAM de las 64 combinaciones
    RAM64(in=in, load=adA, address=address[3..8], out=memA);
    RAM64(in=in, load=adB, address=address[3..8], out=memB);
    RAM64(in=in, load=adC, address=address[3..8], out=memC);
    RAM64(in=in, load=adD, address=address[3..8], out=memD);
    RAM64(in=in, load=adE, address=address[3..8], out=memE);
    RAM64(in=in, load=adF, address=address[3..8], out=memF);
    RAM64(in=in, load=adG, address=address[3..8], out=memG);
    RAM64(in=in, load=adH, address=address[3..8], out=memH);
    //**Se retorna el debido espacio en memoria que exista en ese espacio
    Mux8Way16(a=memA, b=memB, c=memC, d=memD, e=memE, f=memF, g=memG, h=memH, sel=address[0..2], out=out);
}